// Generated by gencpp from file hkvs/square.msg
// DO NOT EDIT!


#ifndef HKVS_MESSAGE_SQUARE_H
#define HKVS_MESSAGE_SQUARE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hkvs
{
template <class ContainerAllocator>
struct square_
{
  typedef square_<ContainerAllocator> Type;

  square_()
    : zs_x(0.0)
    , zx_x(0.0)
    , ys_x(0.0)
    , yx_x(0.0)
    , o_x(0.0)
    , o_y(0.0)
    , zs_y(0.0)
    , zx_y(0.0)
    , ys_y(0.0)
    , yx_y(0.0)
    , square_num(0.0)  {
    }
  square_(const ContainerAllocator& _alloc)
    : zs_x(0.0)
    , zx_x(0.0)
    , ys_x(0.0)
    , yx_x(0.0)
    , o_x(0.0)
    , o_y(0.0)
    , zs_y(0.0)
    , zx_y(0.0)
    , ys_y(0.0)
    , yx_y(0.0)
    , square_num(0.0)  {
  (void)_alloc;
    }



   typedef float _zs_x_type;
  _zs_x_type zs_x;

   typedef float _zx_x_type;
  _zx_x_type zx_x;

   typedef float _ys_x_type;
  _ys_x_type ys_x;

   typedef float _yx_x_type;
  _yx_x_type yx_x;

   typedef float _o_x_type;
  _o_x_type o_x;

   typedef float _o_y_type;
  _o_y_type o_y;

   typedef float _zs_y_type;
  _zs_y_type zs_y;

   typedef float _zx_y_type;
  _zx_y_type zx_y;

   typedef float _ys_y_type;
  _ys_y_type ys_y;

   typedef float _yx_y_type;
  _yx_y_type yx_y;

   typedef float _square_num_type;
  _square_num_type square_num;





  typedef boost::shared_ptr< ::hkvs::square_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hkvs::square_<ContainerAllocator> const> ConstPtr;

}; // struct square_

typedef ::hkvs::square_<std::allocator<void> > square;

typedef boost::shared_ptr< ::hkvs::square > squarePtr;
typedef boost::shared_ptr< ::hkvs::square const> squareConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hkvs::square_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hkvs::square_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hkvs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'hkvs': ['/home/tyj/liantiaonew/src/hkvs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hkvs::square_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hkvs::square_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hkvs::square_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hkvs::square_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hkvs::square_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hkvs::square_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hkvs::square_<ContainerAllocator> >
{
  static const char* value()
  {
    return "163b03e92fe2e6978d7ca6fcb8133a7c";
  }

  static const char* value(const ::hkvs::square_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x163b03e92fe2e697ULL;
  static const uint64_t static_value2 = 0x8d7ca6fcb8133a7cULL;
};

template<class ContainerAllocator>
struct DataType< ::hkvs::square_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hkvs/square";
  }

  static const char* value(const ::hkvs::square_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hkvs::square_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 zs_x\n\
float32 zx_x\n\
float32 ys_x\n\
float32 yx_x\n\
float32 o_x\n\
float32 o_y\n\
float32 zs_y\n\
float32 zx_y\n\
float32 ys_y\n\
float32 yx_y\n\
float32 square_num\n\
";
  }

  static const char* value(const ::hkvs::square_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hkvs::square_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.zs_x);
      stream.next(m.zx_x);
      stream.next(m.ys_x);
      stream.next(m.yx_x);
      stream.next(m.o_x);
      stream.next(m.o_y);
      stream.next(m.zs_y);
      stream.next(m.zx_y);
      stream.next(m.ys_y);
      stream.next(m.yx_y);
      stream.next(m.square_num);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct square_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hkvs::square_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hkvs::square_<ContainerAllocator>& v)
  {
    s << indent << "zs_x: ";
    Printer<float>::stream(s, indent + "  ", v.zs_x);
    s << indent << "zx_x: ";
    Printer<float>::stream(s, indent + "  ", v.zx_x);
    s << indent << "ys_x: ";
    Printer<float>::stream(s, indent + "  ", v.ys_x);
    s << indent << "yx_x: ";
    Printer<float>::stream(s, indent + "  ", v.yx_x);
    s << indent << "o_x: ";
    Printer<float>::stream(s, indent + "  ", v.o_x);
    s << indent << "o_y: ";
    Printer<float>::stream(s, indent + "  ", v.o_y);
    s << indent << "zs_y: ";
    Printer<float>::stream(s, indent + "  ", v.zs_y);
    s << indent << "zx_y: ";
    Printer<float>::stream(s, indent + "  ", v.zx_y);
    s << indent << "ys_y: ";
    Printer<float>::stream(s, indent + "  ", v.ys_y);
    s << indent << "yx_y: ";
    Printer<float>::stream(s, indent + "  ", v.yx_y);
    s << indent << "square_num: ";
    Printer<float>::stream(s, indent + "  ", v.square_num);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HKVS_MESSAGE_SQUARE_H
